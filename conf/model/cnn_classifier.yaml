defaults:
  - optim: adamw
  - loss_f: bce_with_logits_loss
  - metrics@val_metrics: metric_collection
  - metrics@val_metrics.metrics: [precision, recall]
  - layers/misc@layers: sequential_from_kwargs
  - layers/misc@layers.embedding: embedding
  - layers/misc@layers.flatten_after_embedding: flatten_after_embedding
  - layers/conv_block/conv_layer@layers.in_conv: same2d
  - layers/activation@layers.act1: elu
  - layers/conv_block/conv_layer@layers.hidden_conv1: same2d
  - layers/activation@layers.act2: elu
  - layers/conv_block/conv_layer@layers.out_conv: same2d

  - optional optional_overrides/optim: ${model/optim}
  - optional optional_overrides/loss_f: ${model/loss_f}_camelyon16_embeddings

_target_: validation_nn.model.CNNClassifier

optim:
  _partial_: true
  lr: 1e-5

val_metrics:
  _convert_: all
  metrics:
#    accuracy:
#      average: weighted
#      num_classes: 3
#      ignore_index: 0
#      mdmc_average: global
    precision:
      num_classes: 1
    recall:
      num_classes: 1

layers:
  embedding:
    num_embeddings: 256  # FIXME: find a way to make this parametric
    embedding_dim: 1
  in_conv:
    in_channels: ${model.layers.embedding.embedding_dim}
    out_channels: 8
  hidden_conv1:
    in_channels: ${model.layers.in_conv.out_channels}
    out_channels: ${model.layers.in_conv.out_channels}
  out_conv:
    in_channels: ${model.layers.in_conv.out_channels}
    out_channels: 1  # [background, tissue, cancer]